type AccountCredentials {
  token: String!
}

type Contact {
  address: String
  createdAt: ISO8601DateTime!
  email: String
  id: ID!
  name: String
  phone: String
  updatedAt: ISO8601DateTime!
}

input ContactInput {
  id: ID
  name: String
  phone: String
  email: String
  address: String
  discarded: Boolean
}

"""Autogenerated return type of Contact"""
type ContactPayload {
  contact: Contact
  errors: [Error!]
  status: Int!
}

type Error {
  fullMessage: String!
  message: String!
  property: String!
}

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

"""Represents untyped JSON"""
scalar JSON

type Mutation {
  """
  A mutation for creating, updating and discarding contacts. Modify an existing
  mutation by passing an id. Discard a contact by passing true for the discard field
  """
  contact(contactInput: ContactInput!): ContactPayload
  login(email: String!, password: String!): UserLoginPayload
  signup(userInput: UserRegisterInput!): RegisterUserPayload
}

type Query {
  """
  A query for getting one or more contacts, pass a value for id to get a single
  contact or leave blank to get all contacts. When id is passed the found
  contact will be the first value in the array returned
  """
  contacts(id: ID): [Contact!]!
}

"""Autogenerated return type of RegisterUser"""
type RegisterUserPayload {
  errors: [Error!]
  status: Int!
  user: User
}

type User {
  createdAt: ISO8601DateTime
  email: String
  id: ID!
  status: String
  tokens: JSON
  updatedAt: ISO8601DateTime
}

"""Autogenerated return type of UserLogin"""
type UserLoginPayload {
  credentials: AccountCredentials
  errors: [Error!]
  status: Int!
  user: User
}

input UserRegisterInput {
  email: String
  password: String
  passwordConfirmation: String
}

